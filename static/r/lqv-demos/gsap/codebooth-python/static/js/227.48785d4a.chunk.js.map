{"version":3,"file":"static/js/227.48785d4a.chunk.js","mappings":"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","sources":["@production/Audio.tsx","@production/ScrubberBar.tsx","@production/index.js","metadata.ts"],"sourcesContent":["import {useME} from \"@lqv/playback/react\";\nimport {useEffect, useRef} from \"react\";\n\n/**\n * <audio> element synced with MediaElement.\n */\nexport function Audio(props: React.PropsWithChildren<React.AudioHTMLAttributes<HTMLAudioElement>>): JSX.Element {\n  const audio = useRef<HTMLAudioElement>();\n  const playback = useME();\n\n  useEffect(() => {\n    function play() {\n      audio.current?.play();\n    }\n\n    function pause() {\n      audio.current?.pause();\n    }\n\n    function syncTime() {\n      console.log(playback.currentTime);\n      (audio.current as HTMLAudioElement).currentTime = playback.currentTime;\n    }\n\n    playback.addEventListener(\"pause\", pause);\n    playback.addEventListener(\"play\", play);\n    playback.addEventListener(\"seeking\", syncTime);\n\n    return () => {\n      playback.removeEventListener(\"pause\", pause);\n      playback.removeEventListener(\"play\", play);\n      playback.removeEventListener(\"seeking\", syncTime);\n    }\n  }, []);\n\n  return <audio ref={audio} {...props}/>;\n}","import \"./ScrubberBar.css\";\n\nimport {useForceUpdate} from \"@liqvid/utils/react\";\nimport {useME} from \"@lqv/playback/react\";\nimport {useCallback, useEffect, useMemo, useRef} from \"react\";\n\nexport function ScrubberBar(): JSX.Element {\n  const playback = useME();\n  const input = useRef<HTMLInputElement>(null);\n  const forceUpdate = useForceUpdate();\n\n  // synchronize\n  useEffect(() => {\n    playback.addEventListener(\"timeupdate\", forceUpdate);\n\n    return () => {\n      playback.removeEventListener(\"timeupdate\", forceUpdate);\n    };\n  }, [playback]);\n\n  // update\n  const onChange = useCallback((e) => {\n    playback.currentTime = parseFloat(e.currentTarget.value);\n  }, [playback]);\n\n  // fullscreen\n  const toggleFullscreen = useCallback(() => {\n    if (document.fullscreenElement) {\n      document.exitFullscreen();\n    } else {\n      document.body.requestFullscreen();\n    }\n  }, []);\n\n  useEffect(() => {\n    document.addEventListener(\"fullscreenchange\", forceUpdate);\n\n    return () => {\n      document.removeEventListener(\"fullscreenchange\", forceUpdate);\n    }\n  }, []);\n\n  /** Play timeline. */\n  const play = useMemo(() => playback.play.bind(playback), [playback]);\n\n  /** Pause timeline. */\n  const pause = useMemo(() => playback.pause.bind(playback), [playback]);\n\n  return (\n    <div id=\"scrubber\">\n      <button aria-label=\"Play\" title=\"Play\" onClick={play}>▶</button>\n      <button aria-label=\"Pause\" title=\"Pause\" onClick={pause}>⏸</button>\n      <input\n        onChange={onChange} ref={input}\n        type=\"range\" min=\"0\" max={playback.duration} step=\"any\" value={playback.currentTime} />\n      <button\n        aria-label=\"Fullscreen\"\n        title={document.fullscreenElement ? \"Exit full screen\" : \"Full screen\"}\n        onClick={toggleFullscreen}\n      >{document.fullscreenElement ? unFullscreenIcon : fullscreenIcon}</button>\n    </div>\n  );\n}\n\nconst fullscreenIcon = <svg viewBox=\"0 0 36 36\"><path fill=\"black\" d=\"M 10 16 h 2 v -4 h 4 v -2 h -6 v 6 z\"></path><path fill=\"black\" d=\"M 20 10 v 2 h 4 v 4 h 2 v -6 h -6 z\"></path><path fill=\"black\" d=\"M 24 24 h -4 v 2 h 6 v -6 h -2 v 4 z\"></path><path fill=\"black\" d=\"M 12 20 h -2 v 6 h 6 v -2 h -4 v -4 z\"></path></svg>;\nconst unFullscreenIcon = <svg viewBox=\"0 0 36 36\"><path fill=\"black\" d=\"M 14 14 h -4 v 2 h 6 v -6 h -2 v 4 z\"></path><path fill=\"black\" d=\"M 22 14 v -4 h -2 v 6 h 6 v -2 h -4 z\"></path><path fill=\"black\" d=\"M 20 26 h 2 v -4 h 4 v -2 h -6 v 6 z\"></path><path fill=\"black\" d=\"M 10 22 h 4 v 4 h 2 v -6 h -6 v 2 z\"></path></svg>;\n","import \"../codebooth.css\";\nimport \"../style.css\";\nimport \"../syntax.css\";\n\nimport {python} from \"@codemirror/lang-python\";\nimport {syntaxHighlighting} from \"@codemirror/language\";\nimport {classHighlighter} from \"@lezer/highlight\";\nimport {basicSetup, Buttons, Clear, CodeBooth, Console, Copy, Editor, EditorGroup, EditorPanel, Replay, Resize, Run, Tab, TabList} from \"@lqv/codebooth\";\nimport {PythonRun} from \"@lqv/codebooth/python\";\nimport {Bridge} from \"@lqv/gsap\";\nimport {gsap} from \"gsap\";\n\nimport {duration} from \"../metadata\";\nimport {Audio} from \"./Audio\";\nimport {ScrubberBar} from \"./ScrubberBar\";\n\nconst tl = gsap.timeline({duration, paused: true});\nconst recordingData = fetch(\"./recordings.json\").then(res => res.json());\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Bridge timeline={tl}>\n        <Content />\n        <ScrubberBar timeline={tl} />\n      </Bridge>\n    </div>\n  );\n}\n\nexport default App;\n\nfunction Content() {\n  return (\n    <>\n      <Audio src=\"./audio.mp4\" />\n      <CodeBooth>\n        <section className=\"lqv-sidebar\">\n          <h2>View</h2>\n          <TabList className=\"lqv-group-tabs\">\n            <Tab id=\"replay\">Replay</Tab>\n            <Tab id=\"playground\">Playground</Tab>\n          </TabList>\n\n          <h2>Code</h2>\n          <Buttons>\n            <Run />\n            <Copy from=\"replay\" to=\"playground\" />\n            <Clear />\n          </Buttons>\n        </section>\n\n\n        <EditorGroup id=\"replay\">\n          <EditorPanel filename=\"untitled.py\">\n            <Replay\n              extensions={[python(), basicSetup, syntaxHighlighting(classHighlighter)]}\n              replay={recordingData}\n            />\n          </EditorPanel>\n        </EditorGroup>\n        <EditorGroup id=\"playground\">\n          <EditorPanel filename=\"untitled.py\">\n            <Editor\n              extensions={[python(), basicSetup, syntaxHighlighting(classHighlighter)]}\n            />\n          </EditorPanel>\n        </EditorGroup>\n\n        <Resize min={.1} max={.3} />\n        <Resize dir=\"ns\" min={0.04} max={.5} />\n        <PythonRun />\n        <Console />\n      </CodeBooth>\n    </>\n  );\n}\n","export const duration = 52.96;"],"names":["Audio","props","audio","useRef","playback","useME","useEffect","play","current","pause","syncTime","console","log","currentTime","addEventListener","removeEventListener","ref","ScrubberBar","input","forceUpdate","useForceUpdate","onChange","useCallback","e","parseFloat","currentTarget","value","toggleFullscreen","document","fullscreenElement","exitFullscreen","body","requestFullscreen","useMemo","bind","id","title","onClick","type","min","max","duration","step","unFullscreenIcon","fullscreenIcon","viewBox","fill","d","tl","gsap","paused","recordingData","fetch","then","res","json","className","timeline","Content","src","from","to","EditorGroup","EditorPanel","filename","Replay","extensions","python","basicSetup","syntaxHighlighting","classHighlighter","replay","Editor","Resize","dir","Console"],"sourceRoot":""}