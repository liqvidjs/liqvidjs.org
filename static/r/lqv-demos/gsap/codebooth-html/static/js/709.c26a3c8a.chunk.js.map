{"version":3,"file":"static/js/709.c26a3c8a.chunk.js","mappings":"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","sources":["@production/Audio.tsx","components/ToggleButton.tsx","@production/ScrubberBar.tsx","@production/index.js","metadata.ts","components/Popup.tsx","files.ts"],"sourcesContent":["import {useME} from \"@lqv/playback/react\";\nimport {useEffect, useRef} from \"react\";\n\n/**\n * <audio> element synced with MediaElement.\n */\nexport function Audio(props: React.PropsWithChildren<React.AudioHTMLAttributes<HTMLAudioElement>>): JSX.Element {\n  const audio = useRef<HTMLAudioElement>();\n  const playback = useME();\n\n  useEffect(() => {\n    function play() {\n      audio.current?.play();\n    }\n\n    function pause() {\n      audio.current?.pause();\n    }\n\n    function syncTime() {\n      (audio.current as HTMLAudioElement).currentTime = playback.currentTime;\n    }\n\n    playback.addEventListener(\"pause\", pause);\n    playback.addEventListener(\"play\", play);\n    playback.addEventListener(\"seeking\", syncTime);\n\n    return () => {\n      playback.removeEventListener(\"pause\", pause);\n      playback.removeEventListener(\"play\", play);\n      playback.removeEventListener(\"seeking\", syncTime);\n    }\n  }, []);\n\n  return <audio ref={audio} {...props}/>;\n}","import \"./ToggleButton.css\";\n\nimport {useBoothStore} from \"@lqv/codebooth\";\nimport {useCallback, useEffect} from \"react\";\nimport {useStore} from \"zustand\";\n\nexport function ToggleButton(props: {\n  className: string;\n\n  title: string;\n}) {\n  const store = useBoothStore();\n\n  // hack\n  useEffect(() => {\n    store.setState(prev => ({classNames: [...prev.classNames, props.className]}));\n  }, [props.className, store]);\n\n  // toggle\n  const onClick = useCallback(() => {\n    store.setState(prev => {\n      if (prev.classNames.includes(props.className)) {\n        return ({classNames: prev.classNames.filter(cls => cls !== props.className)});\n      }\n      return ({classNames: [...prev.classNames, props.className]});\n    });\n  }, [props.className, store]);\n\n  const active = useStore(store, state => state.classNames.includes(props.className));\n\n  return (\n    <button aria-pressed={active} className=\"lqv-cb-toggle\" onClick={onClick}>\n      <img alt=\"\" src={`./eye-${active ? \"open\" : \"shut\"}.svg`}/>\n      {props.title}\n    </button>\n  );\n}","import \"./ScrubberBar.css\";\n\nimport {useForceUpdate} from \"@liqvid/utils/react\";\nimport {useME} from \"@lqv/playback/react\";\nimport {useCallback, useEffect, useMemo, useRef} from \"react\";\n\nexport function ScrubberBar(): JSX.Element {\n  const playback = useME();\n  const input = useRef<HTMLInputElement>(null);\n  const forceUpdate = useForceUpdate();\n\n  // synchronize\n  useEffect(() => {\n    playback.addEventListener(\"timeupdate\", forceUpdate);\n\n    return () => {\n      playback.removeEventListener(\"timeupdate\", forceUpdate);\n    };\n  }, [playback]);\n\n  // update\n  const onChange = useCallback((e) => {\n    playback.currentTime = parseFloat(e.currentTarget.value);\n  }, [playback]);\n\n  // fullscreen\n  const toggleFullscreen = useCallback(() => {\n    if (document.fullscreenElement) {\n      document.exitFullscreen();\n    } else {\n      document.body.requestFullscreen();\n    }\n  }, []);\n\n  useEffect(() => {\n    document.addEventListener(\"fullscreenchange\", forceUpdate);\n\n    return () => {\n      document.removeEventListener(\"fullscreenchange\", forceUpdate);\n    }\n  }, []);\n\n  /** Play timeline. */\n  const play = useMemo(() => playback.play.bind(playback), [playback]);\n\n  /** Pause timeline. */\n  const pause = useMemo(() => playback.pause.bind(playback), [playback]);\n\n  return (\n    <div id=\"scrubber\">\n      <button aria-label=\"Play\" title=\"Play\" onClick={play}>▶</button>\n      <button aria-label=\"Pause\" title=\"Pause\" onClick={pause}>⏸</button>\n      <input\n        onChange={onChange} ref={input}\n        type=\"range\" min=\"0\" max={playback.duration} step=\"any\" value={playback.currentTime} />\n      <button\n        aria-label=\"Fullscreen\"\n        title={document.fullscreenElement ? \"Exit full screen\" : \"Full screen\"}\n        onClick={toggleFullscreen}\n      >{document.fullscreenElement ? unFullscreenIcon : fullscreenIcon}</button>\n    </div>\n  );\n}\n\nconst fullscreenIcon = <svg viewBox=\"0 0 36 36\"><path fill=\"black\" d=\"M 10 16 h 2 v -4 h 4 v -2 h -6 v 6 z\"></path><path fill=\"black\" d=\"M 20 10 v 2 h 4 v 4 h 2 v -6 h -6 z\"></path><path fill=\"black\" d=\"M 24 24 h -4 v 2 h 6 v -6 h -2 v 4 z\"></path><path fill=\"black\" d=\"M 12 20 h -2 v 6 h 6 v -2 h -4 v -4 z\"></path></svg>;\nconst unFullscreenIcon = <svg viewBox=\"0 0 36 36\"><path fill=\"black\" d=\"M 14 14 h -4 v 2 h 6 v -6 h -2 v 4 z\"></path><path fill=\"black\" d=\"M 22 14 v -4 h -2 v 6 h 6 v -2 h -4 z\"></path><path fill=\"black\" d=\"M 20 26 h 2 v -4 h 4 v -2 h -6 v 6 z\"></path><path fill=\"black\" d=\"M 10 22 h 4 v 4 h 2 v -6 h -6 v 2 z\"></path></svg>;\n","import \"../codebooth.css\";\nimport \"../style.css\";\nimport \"../syntax.css\";\nimport \"./interactive.css\";\n\nimport {syntaxHighlighting} from \"@codemirror/language\";\nimport {classHighlighter} from \"@lezer/highlight\";\nimport {basicSetup, Buttons, Clear, CodeBooth, Console, Copy, Editor, EditorGroup, EditorPanel, FileTabs, Replay, ReplayMultiple, Resize, Run, Tab, TabList} from \"@lqv/codebooth\";\nimport {extensionFromFilename, HTMLPreview} from \"@lqv/codebooth/html\";\nimport {Bridge} from \"@lqv/gsap\";\nimport {gsap} from \"gsap\";\n\nimport {Audio} from \"./Audio\";\nimport {Popup} from \"../components/Popup\";\nimport {ToggleButton} from \"../components/ToggleButton\";\nimport {files} from \"../files\";\nimport {duration} from \"../metadata\";\nimport {ScrubberBar} from \"./ScrubberBar\";\n\nconst tl = gsap.timeline({duration, paused: true});\nconst recordingData = fetch(\"./recordings.json\").then(res => res.json());\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Bridge timeline={tl}>\n        <Content />\n        <ScrubberBar timeline={tl} />\n      </Bridge>\n    </div>\n  );\n}\n\nexport default App;\n\nfunction Content() {\n  return (\n    <>\n      <Audio src=\"./audio.mp4\" />\n      <CodeBooth>\n        <section className=\"lqv-sidebar\">\n          <h2>View</h2>\n          <TabList className=\"lqv-group-tabs\">\n            <Tab id=\"replay\">Replay</Tab>\n            <Tab id=\"playground\">Playground</Tab>\n          </TabList>\n          <ToggleButton className=\"show-console\" title=\"Console\" />\n          <ToggleButton className=\"show-preview\" title=\"Preview\" />\n\n          <h2>Files</h2>\n          <FileTabs />\n\n          <h2>Code</h2>\n          <Buttons>\n            <Run />\n            <Copy from=\"replay\" to=\"playground\" />\n            <Clear />\n          </Buttons>\n        </section>\n\n        <EditorGroup id=\"replay\">\n          {Object.keys(files).map((filename) => (\n            <EditorPanel filename={filename} key={filename}>\n              <Replay\n                content={files[filename]}\n                extensions={[\n                  basicSetup,\n                  extensionFromFilename(filename),\n                  syntaxHighlighting(classHighlighter)\n                ]}\n              />\n            </EditorPanel>\n          ))}\n          <ReplayMultiple replay={recordingData} start={0} />\n        </EditorGroup>\n        <EditorGroup id=\"playground\">\n          {Object.keys(files).map((filename) => (\n            <EditorPanel filename={filename} key={filename}>\n              <Editor\n                extensions={[\n                  basicSetup,\n                  extensionFromFilename(filename),\n                  syntaxHighlighting(classHighlighter)\n                ]}\n              />\n            </EditorPanel>\n          ))}\n        </EditorGroup>\n        <Resize min={.1} max={.3} />\n        <Resize dir=\"ns\" min={0.04} max={.5} />\n        <Popup title=\"Preview\">\n          <HTMLPreview />\n        </Popup>\n        <Console />\n      </CodeBooth>\n    </>\n  );\n}\n","export const duration = 291.702;\n","import {useMemo, useRef} from \"react\";\nimport {clamp} from \"@liqvid/utils/misc\";\nimport {onDrag} from \"@liqvid/utils/react\";\nimport \"./Popup.css\";\n\ntype DragDir = \"s\" | \"e\" | \"se\";\n\nexport function Popup(props: {\n  children?: React.ReactNode;\n\n  title?: string;\n}) {\n  const dragDir = useRef<DragDir>();\n  const ref = useRef<HTMLElement>();\n  const offset = useRef({x: 0, y: 0});\n\n  const dragEvents = useMemo(\n    () =>\n      onDrag(\n        (e, hit) => {\n          // prevent from dragging off the page\n          const left =\n            clamp(\n              0,\n              hit.x - offset.current.x,\n              window.innerWidth - ref.current.offsetWidth\n            ) / window.innerWidth;\n\n          const top =\n            clamp(\n              0,\n              hit.y - offset.current.y,\n              window.innerHeight - ref.current.offsetHeight\n            ) / window.innerHeight;\n\n          Object.assign(ref.current.style, {\n            left: `${left * 100}%`,\n            top: `${top * 100}%`\n          });\n        },\n        // down\n        (e, hit) => {\n          e.preventDefault();\n          const dims = ref.current.getBoundingClientRect();\n          offset.current.x = hit.x - dims.left;\n          offset.current.y = hit.y - dims.top;\n\n          document.body.classList.add(\"dragging\");\n        },\n        () => document.body.classList.remove(\"dragging\")\n      ),\n    []\n  );\n\n  const resizeEvents = useMemo(\n    () =>\n      onDrag(\n        (e, {dx, dy}) => {\n          e.preventDefault();\n          const rect = ref.current.getBoundingClientRect();\n\n          let {height, width} = rect;\n\n          // console.log(dx, width);\n\n          if (dragDir.current.includes(\"e\")) width += dx;\n          if (dragDir.current.includes(\"s\")) height += dy;\n\n          Object.assign(ref.current.style, {\n            height: `${height}px`,\n            width: `${width}px`\n          });\n        },\n        (e) => {\n          dragDir.current = (e.target as HTMLDivElement).className.match(\n            /ui-resizable-([se]+)/\n          )[1] as DragDir;\n          \n          document.body.classList.add(\"resizing\");\n        },\n        () => document.body.classList.remove(\"resizing\")\n      ),\n    []\n  );\n\n  return (\n    <aside className=\"popup\" ref={ref}>\n      {props.title && (\n        <header className=\"draggable\" {...dragEvents}>\n          {props.title}\n        </header>\n      )}\n      <div className=\"ui-resizable-handle ui-resizable-e\" {...resizeEvents} />\n      <div className=\"ui-resizable-handle ui-resizable-s\" {...resizeEvents} />\n      <div className=\"ui-resizable-handle ui-resizable-se\" {...resizeEvents} />\n      <div className=\"popup-content\">{props.children}</div>\n    </aside>\n  );\n}\n","export const files = {\n  \"index.html\": `<html>\n<head>\n  <link href=\"style.css\" rel=\"stylesheet\"/>\n</head>\n<body>\n  <canvas></canvas>\n  <script src=\"script.js\"></script>\n</body>\n</html>`,\n  \"style.css\": `* {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\nhtml, body, canvas {\n  height: 100%;\n  width: 100%;\n}\n`,\n  \"script.js\": `const canvas = document.querySelector(\"canvas\");\nconst ctx = canvas.getContext(\"2d\");\n`\n};\n"],"names":["Audio","props","audio","useRef","playback","useME","useEffect","play","current","pause","syncTime","currentTime","addEventListener","removeEventListener","ref","ToggleButton","store","useBoothStore","setState","prev","classNames","className","onClick","useCallback","includes","filter","cls","active","useStore","state","alt","src","title","ScrubberBar","input","forceUpdate","useForceUpdate","onChange","e","parseFloat","currentTarget","value","toggleFullscreen","document","fullscreenElement","exitFullscreen","body","requestFullscreen","useMemo","bind","id","type","min","max","duration","step","unFullscreenIcon","fullscreenIcon","viewBox","fill","d","tl","gsap","paused","recordingData","fetch","then","res","json","timeline","Content","FileTabs","from","to","EditorGroup","Object","keys","files","map","filename","EditorPanel","Replay","content","extensions","basicSetup","extensionFromFilename","syntaxHighlighting","classHighlighter","replay","start","Editor","Resize","dir","Popup","Console","dragDir","offset","x","y","dragEvents","onDrag","hit","left","clamp","window","innerWidth","offsetWidth","top","innerHeight","offsetHeight","assign","style","preventDefault","dims","getBoundingClientRect","classList","add","remove","resizeEvents","dx","dy","rect","height","width","target","match","children"],"sourceRoot":""}