{"version":3,"file":"static/js/581.8ecae3cb.chunk.js","mappings":"sOAKaA,EAER,SAACC,GACJ,IAAMC,EAAKD,EAAME,SACXC,GAAQC,EAAAA,EAAAA,QAAyB,MAEvC,GAA0BC,EAAAA,EAAAA,UAAS,GAAnC,eAAOC,EAAP,KAAcC,EAAd,MAEAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAWR,EAAGS,cAAc,YAClCT,EAAGS,cAAc,YAAY,WAC3BH,EAASN,EAAGU,QACRF,GACFA,GAEH,GACF,GAAE,CAACR,IAEJ,IAAMW,GAAWC,EAAAA,EAAAA,cAAY,SAACC,GAC5B,IAAMH,EAAOI,WAAWD,EAAEE,cAAcV,OACxCL,EAAGgB,KAAKN,GAAM,GACdJ,EAASI,EACV,GAAE,CAACV,IAGEiB,GAAmBL,EAAAA,EAAAA,cAAY,WAC/BM,SAASC,kBACXD,SAASE,iBAETF,SAASG,KAAKC,mBAEjB,GAAE,IAEGC,GAAcC,EAAAA,EAAAA,OAEpBjB,EAAAA,EAAAA,YAAU,WAGR,OAFAW,SAASO,iBAAiB,mBAAoBF,GAEvC,WACLL,SAASQ,oBAAoB,mBAAoBH,EAClD,CACF,GAAE,IAEHI,QAAQC,IAAIV,SAASC,mBAGrB,IAAMU,GAAOjB,EAAAA,EAAAA,cAAY,kBAAMZ,EAAG6B,KAAK,MAAM,EAApB,GAA4B,CAAC7B,IAGhD8B,GAAQlB,EAAAA,EAAAA,cAAY,kBAAMZ,EAAG8B,OAAT,GAAkB,CAAC9B,IAE7C,OACE,iBAAK+B,GAAG,WAAR,WACE,mBAAQ,aAAW,OAAOC,MAAM,OAAOC,QAASJ,EAAhD,qBACA,mBAAQ,aAAW,QAAQG,MAAM,QAAQC,QAASH,EAAlD,qBACA,kBACEnB,SAAUA,EAAUuB,IAAKhC,EACzBiC,KAAK,QAAQC,IAAI,IAAIC,IAAKrC,EAAGsC,WAAYC,KAAK,MAAMlC,MAAOA,KAC7D,mBACE,aAAW,aACX2B,MAAOd,SAASC,kBAAoB,mBAAqB,cACzDc,QAAShB,EAHX,SAIIC,SAASC,kBAAoBqB,EAAmBC,MAGzD,EAEKA,GAAiB,iBAAKC,QAAQ,YAAb,WAAyB,iBAAMC,KAAK,QAAQC,EAAE,0CAA8C,iBAAMD,KAAK,QAAQC,EAAE,yCAA6C,iBAAMD,KAAK,QAAQC,EAAE,0CAA8C,iBAAMD,KAAK,QAAQC,EAAE,6CACvQJ,GAAmB,iBAAKE,QAAQ,YAAb,WAAyB,iBAAMC,KAAK,QAAQC,EAAE,0CAA8C,iBAAMD,KAAK,QAAQC,EAAE,2CAA+C,iBAAMD,KAAK,QAAQC,EAAE,0CAA8C,iBAAMD,KAAK,QAAQC,EAAE,2CCjE3Q5C,EAAK6C,EAAAA,GAAAA,SAAc,CAACP,SAAU,OAAQQ,QAAQ,IAC9CC,EAAgBC,MAAM,qBAAqBC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,MAAR,IAezD,MAbA,WACE,OACE,iBAAKC,UAAU,MAAf,WACE,SAAC,IAAD,WACE,SAAC,IAAD,CAAQnD,SAAUD,EAAlB,UACE,SAAC,EAAAqD,EAAD,CAAQC,MAAM,WAAWC,KAAMR,EAAeS,IAAI,sBAGtD,SAAC,EAAD,CAAavD,SAAUD,MAG5B,C,mECtBYyD,EAAiD,SAAC1D,GAAD,OAC5D,iCACE,iBAAMgC,GAAG,QAAT,4CACA,iBAAKA,GAAG,UAAR,WACE,iBAAKW,QAAQ,eAAb,WACE,mBAAQgB,GAAG,KAAKC,GAAG,IAAIC,EAAE,OAAOjB,KAAK,SACrC,mBAAQe,GAAG,KAAKC,GAAG,KAAKC,EAAE,OAAOjB,KAAK,UACtC,mBAAQe,GAAG,IAAIC,GAAG,IAAIC,EAAE,OAAOjB,KAAK,WACpC,mBAAQe,GAAG,IAAIC,GAAG,KAAKC,EAAE,OAAOjB,KAAK,YACrC,mBAAQe,GAAG,IAAIC,GAAG,IAAIC,EAAE,OAAOjB,KAAK,YAErC5C,EAAM8D,cAXiD,C","sources":["@production/ScrubberBar.tsx","@production/index.js","shared.tsx"],"sourcesContent":["import \"./ScrubberBar.css\";\n\nimport {useForceUpdate} from \"@liqvid/utils/react\";\nimport {useCallback, useEffect, useRef, useState} from \"react\";\n\nexport const ScrubberBar: React.FC<{\n  timeline: GSAPTimeline;\n}> = (props) => {\n  const tl = props.timeline;\n  const input = useRef<HTMLInputElement>(null);\n\n  const [value, setValue] = useState(0);\n\n  useEffect(() => {\n    const onUpdate = tl.eventCallback(\"onUpdate\");\n    tl.eventCallback(\"onUpdate\", () => {\n      setValue(tl.time());\n      if (onUpdate) {\n        onUpdate();\n      }\n    });\n  }, [tl]);\n\n  const onChange = useCallback((e) => {\n    const time = parseFloat(e.currentTarget.value);\n    tl.seek(time, false);\n    setValue(time);\n  }, [tl]);\n\n  // fullscreen\n  const toggleFullscreen = useCallback(() => {\n    if (document.fullscreenElement) {\n      document.exitFullscreen();\n    } else {\n      document.body.requestFullscreen();\n    }\n  }, []);\n\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    document.addEventListener(\"fullscreenchange\", forceUpdate);\n\n    return () => {\n      document.removeEventListener(\"fullscreenchange\", forceUpdate);\n    }\n  }, []);\n\n  console.log(document.fullscreenElement)\n\n  /** Play timeline. */\n  const play = useCallback(() => tl.play(null, false), [tl]);\n\n  /** Pause timeline. */\n  const pause = useCallback(() => tl.pause(), [tl]);\n\n  return (\n    <div id=\"scrubber\">\n      <button aria-label=\"Play\" title=\"Play\" onClick={play}>▶</button>\n      <button aria-label=\"Pause\" title=\"Pause\" onClick={pause}>⏸</button>\n      <input\n        onChange={onChange} ref={input}\n        type=\"range\" min=\"0\" max={tl.duration()} step=\"any\" value={value} />\n      <button\n        aria-label=\"Fullscreen\"\n        title={document.fullscreenElement ? \"Exit full screen\" : \"Full screen\"}\n        onClick={toggleFullscreen}\n        >{document.fullscreenElement ? unFullscreenIcon : fullscreenIcon}</button>\n    </div>\n  );\n};\n\nconst fullscreenIcon = <svg viewBox=\"0 0 36 36\"><path fill=\"black\" d=\"M 10 16 h 2 v -4 h 4 v -2 h -6 v 6 z\"></path><path fill=\"black\" d=\"M 20 10 v 2 h 4 v 4 h 2 v -6 h -6 z\"></path><path fill=\"black\" d=\"M 24 24 h -4 v 2 h 6 v -6 h -2 v 4 z\"></path><path fill=\"black\" d=\"M 12 20 h -2 v 6 h 6 v -2 h -4 v -4 z\"></path></svg>;\nconst unFullscreenIcon = <svg viewBox=\"0 0 36 36\"><path fill=\"black\" d=\"M 14 14 h -4 v 2 h 6 v -6 h -2 v 4 z\"></path><path fill=\"black\" d=\"M 22 14 v -4 h -2 v 6 h 6 v -2 h -4 z\"></path><path fill=\"black\" d=\"M 20 26 h 2 v -4 h 4 v -2 h -6 v 6 z\"></path><path fill=\"black\" d=\"M 10 22 h 4 v 4 h 2 v -6 h -6 v 2 z\"></path></svg>;\n","import {Cursor} from \"@lqv/cursor/react\";\nimport {Bridge} from \"@lqv/gsap\";\nimport {gsap} from \"gsap\";\nimport \"../App.css\";\nimport {Targets} from \"../shared\";\nimport {ScrubberBar} from \"./ScrubberBar\";\n\n/** Timeline that we will use to control everything. */\nconst tl = gsap.timeline({duration: 10.608, paused: true});\nconst recordingData = fetch(\"./recordings.json\").then(res => res.json());\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Targets>\n        <Bridge timeline={tl}>\n          <Cursor align=\"top left\" data={recordingData} src=\"./cursor.svg\" />\n        </Bridge>\n      </Targets>\n      <ScrubberBar timeline={tl} />\n    </div>\n  );\n}\n\nexport default App;\n","export const Targets: React.FC<React.PropsWithChildren<{}>> = (props) =>\n  <>\n    <span id=\"watch\">Look, you can point at things</span>\n    <div id=\"targets\">\n      <svg viewBox=\"-5 -2.5 10 5\">\n        <circle cx=\"-4\" cy=\"2\" r=\"0.03\" fill=\"red\" />\n        <circle cx=\"-2\" cy=\"-2\" r=\"0.03\" fill=\"blue\" />\n        <circle cx=\"0\" cy=\"2\" r=\"0.03\" fill=\"green\" />\n        <circle cx=\"2\" cy=\"-2\" r=\"0.03\" fill=\"purple\" />\n        <circle cx=\"4\" cy=\"2\" r=\"0.03\" fill=\"pink\" />\n      </svg>\n      {props.children}\n    </div>\n  </>;\n"],"names":["ScrubberBar","props","tl","timeline","input","useRef","useState","value","setValue","useEffect","onUpdate","eventCallback","time","onChange","useCallback","e","parseFloat","currentTarget","seek","toggleFullscreen","document","fullscreenElement","exitFullscreen","body","requestFullscreen","forceUpdate","useForceUpdate","addEventListener","removeEventListener","console","log","play","pause","id","title","onClick","ref","type","min","max","duration","step","unFullscreenIcon","fullscreenIcon","viewBox","fill","d","gsap","paused","recordingData","fetch","then","res","json","className","C","align","data","src","Targets","cx","cy","r","children"],"sourceRoot":""}