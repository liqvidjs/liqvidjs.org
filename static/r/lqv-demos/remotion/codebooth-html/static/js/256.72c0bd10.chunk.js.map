{"version":3,"file":"static/js/256.72c0bd10.chunk.js","mappings":"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","sources":["components/ToggleButton.tsx","@production/index.js","metadata.ts","components/Popup.tsx","files.ts"],"sourcesContent":["import \"./ToggleButton.css\";\n\nimport {useBoothStore} from \"@lqv/codebooth\";\nimport {useCallback, useEffect} from \"react\";\nimport {useStore} from \"zustand\";\n\nexport function ToggleButton(props: {\n  className: string;\n\n  title: string;\n}) {\n  const store = useBoothStore();\n\n  // hack\n  useEffect(() => {\n    store.setState(prev => ({classNames: [...prev.classNames, props.className]}));\n  }, [props.className, store]);\n\n  // toggle\n  const onClick = useCallback(() => {\n    store.setState(prev => {\n      if (prev.classNames.includes(props.className)) {\n        return ({classNames: prev.classNames.filter(cls => cls !== props.className)});\n      }\n      return ({classNames: [...prev.classNames, props.className]});\n    });\n  }, [props.className, store]);\n\n  const active = useStore(store, state => state.classNames.includes(props.className));\n\n  return (\n    <button aria-pressed={active} className=\"lqv-cb-toggle\" onClick={onClick}>\n      <img alt=\"\" src={`./eye-${active ? \"open\" : \"shut\"}.svg`}/>\n      {props.title}\n    </button>\n  );\n}","import \"../codebooth.css\";\nimport \"../style.css\";\nimport \"../syntax.css\";\nimport \"./interactive.css\";\n\nimport {syntaxHighlighting} from \"@codemirror/language\";\nimport {classHighlighter} from \"@lezer/highlight\";\nimport {basicSetup, Buttons, Clear, CodeBooth, Console, Copy, Editor, EditorGroup, EditorPanel, FileTabs, Replay, ReplayMultiple, Resize, Run, Tab, TabList} from \"@lqv/codebooth\";\nimport {extensionFromFilename, HTMLPreview} from \"@lqv/codebooth/html\";\nimport {Bridge} from \"@lqv/remotion\";\nimport {Player} from \"@remotion/player\";\nimport {Audio} from \"remotion\";\n\n// import audio from \"../../public/audio.webm\";\nimport {Popup} from \"../components/Popup\";\nimport {ToggleButton} from \"../components/ToggleButton\";\nimport {files} from \"../files\";\nimport {duration, fps} from \"../metadata\";\n\nconst recordingData = fetch(\"./recordings.json\").then(res => res.json());\n\nfunction App() {\n  return (\n    <Player\n      clickToPlay={false}\n      component={Content}\n      durationInFrames={Math.ceil(fps * duration)}\n      compositionWidth={window.innerWidth}\n      compositionHeight={window.innerHeight}\n      fps={fps}\n      style={{\n        width: \"100%\"\n      }}\n      controls\n    />\n  );\n}\n\nexport default App;\n\nfunction Content() {\n  return (\n    <Bridge>\n      <Audio src=\"./audio.mp4\" />\n      <CodeBooth>\n        <section className=\"lqv-sidebar\">\n          <h2>View</h2>\n          <TabList className=\"lqv-group-tabs\">\n            <Tab id=\"replay\">Replay</Tab>\n            <Tab id=\"playground\">Playground</Tab>\n          </TabList>\n          <ToggleButton className=\"show-console\" title=\"Console\" />\n          <ToggleButton className=\"show-preview\" title=\"Preview\" />\n\n          <h2>Files</h2>\n          <FileTabs />\n\n          <h2>Code</h2>\n          <Buttons>\n            <Run />\n            <Copy from=\"replay\" to=\"playground\" />\n            <Clear />\n          </Buttons>\n        </section>\n\n        <EditorGroup id=\"replay\">\n          {Object.keys(files).map((filename) => (\n            <EditorPanel filename={filename} key={filename}>\n              <Replay\n                content={files[filename]}\n                extensions={[\n                  basicSetup,\n                  extensionFromFilename(filename),\n                  syntaxHighlighting(classHighlighter)\n                ]}\n              />\n            </EditorPanel>\n          ))}\n          <ReplayMultiple replay={recordingData} start={0} />\n        </EditorGroup>\n        <EditorGroup id=\"playground\">\n          {Object.keys(files).map((filename) => (\n            <EditorPanel filename={filename} key={filename}>\n              <Editor\n                extensions={[\n                  basicSetup,\n                  extensionFromFilename(filename),\n                  syntaxHighlighting(classHighlighter)\n                ]}\n              />\n            </EditorPanel>\n          ))}\n        </EditorGroup>\n        <Resize min={.1} max={.3} />\n        <Resize dir=\"ns\" min={0.04} max={.5} />\n        <Popup title=\"Preview\">\n          <HTMLPreview />\n        </Popup>\n        <Console />\n      </CodeBooth>\n    </Bridge>\n  );\n}\n","export const duration = 291.702;\nexport const fps = 30;\nexport const durationInFrames = Math.ceil(duration * fps);","import {useMemo, useRef} from \"react\";\nimport {clamp} from \"@liqvid/utils/misc\";\nimport {onDrag} from \"@liqvid/utils/react\";\nimport \"./Popup.css\";\n\ntype DragDir = \"s\" | \"e\" | \"se\";\n\nexport function Popup(props: {\n  children?: React.ReactNode;\n\n  title?: string;\n}) {\n  const dragDir = useRef<DragDir>();\n  const ref = useRef<HTMLElement>();\n  const offset = useRef({x: 0, y: 0});\n\n  const dragEvents = useMemo(\n    () =>\n      onDrag(\n        (e, hit) => {\n          // prevent from dragging off the page\n          const left =\n            clamp(\n              0,\n              hit.x - offset.current.x,\n              window.innerWidth - ref.current.offsetWidth\n            ) / window.innerWidth;\n\n          const top =\n            clamp(\n              0,\n              hit.y - offset.current.y,\n              window.innerHeight - ref.current.offsetHeight\n            ) / window.innerHeight;\n\n          Object.assign(ref.current.style, {\n            left: `${left * 100}%`,\n            top: `${top * 100}%`\n          });\n        },\n        // down\n        (e, hit) => {\n          e.preventDefault();\n          const dims = ref.current.getBoundingClientRect();\n          offset.current.x = hit.x - dims.left;\n          offset.current.y = hit.y - dims.top;\n\n          document.body.classList.add(\"dragging\");\n        },\n        () => document.body.classList.remove(\"dragging\")\n      ),\n    []\n  );\n\n  const resizeEvents = useMemo(\n    () =>\n      onDrag(\n        (e, {dx, dy}) => {\n          e.preventDefault();\n          const rect = ref.current.getBoundingClientRect();\n\n          let {height, width} = rect;\n\n          // console.log(dx, width);\n\n          if (dragDir.current.includes(\"e\")) width += dx;\n          if (dragDir.current.includes(\"s\")) height += dy;\n\n          Object.assign(ref.current.style, {\n            height: `${height}px`,\n            width: `${width}px`\n          });\n        },\n        (e) => {\n          dragDir.current = (e.target as HTMLDivElement).className.match(\n            /ui-resizable-([se]+)/\n          )[1] as DragDir;\n          \n          document.body.classList.add(\"resizing\");\n        },\n        () => document.body.classList.remove(\"resizing\")\n      ),\n    []\n  );\n\n  return (\n    <aside className=\"popup\" ref={ref}>\n      {props.title && (\n        <header className=\"draggable\" {...dragEvents}>\n          {props.title}\n        </header>\n      )}\n      <div className=\"ui-resizable-handle ui-resizable-e\" {...resizeEvents} />\n      <div className=\"ui-resizable-handle ui-resizable-s\" {...resizeEvents} />\n      <div className=\"ui-resizable-handle ui-resizable-se\" {...resizeEvents} />\n      <div className=\"popup-content\">{props.children}</div>\n    </aside>\n  );\n}\n","export const files = {\n  \"index.html\": `<html>\n<head>\n  <link href=\"style.css\" rel=\"stylesheet\"/>\n</head>\n<body>\n  <canvas></canvas>\n  <script src=\"script.js\"></script>\n</body>\n</html>`,\n  \"style.css\": `* {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\nhtml, body, canvas {\n  height: 100%;\n  width: 100%;\n}\n`,\n  \"script.js\": `const canvas = document.querySelector(\"canvas\");\nconst ctx = canvas.getContext(\"2d\");\n`\n};\n"],"names":["ToggleButton","props","store","useBoothStore","useEffect","setState","prev","classNames","className","onClick","useCallback","includes","filter","cls","active","useStore","state","alt","src","title","recordingData","Math","ceil","duration","fetch","then","res","json","clickToPlay","component","Content","durationInFrames","fps","compositionWidth","window","innerWidth","compositionHeight","innerHeight","style","width","controls","Audio","id","FileTabs","from","to","EditorGroup","Object","keys","files","map","filename","EditorPanel","Replay","content","extensions","basicSetup","extensionFromFilename","syntaxHighlighting","classHighlighter","replay","start","Editor","Resize","min","max","dir","Popup","Console","dragDir","useRef","ref","offset","x","y","dragEvents","useMemo","onDrag","e","hit","left","clamp","current","offsetWidth","top","offsetHeight","assign","preventDefault","dims","getBoundingClientRect","document","body","classList","add","remove","resizeEvents","dx","dy","rect","height","target","match","children"],"sourceRoot":""}